name: Build

on:
    workflow_dispatch:  # 允许手动触发（GitHub Actions UI）
    push:
        tags:
            - "v*.*.*"  # 只有 tag 触发 release
    pull_request:
        branches:
            - master
    schedule:
        -   cron: "0 0 * * 1"  # 每周一 00:00 UTC 运

jobs:
    build:
        strategy:
            matrix:
                os: [ ubuntu-latest, macos-latest, windows-latest ]
                rust: [ stable ]  # 仅构建 stable 版本

        runs-on: ${{ matrix.os }}

        steps:
            -   name: Checkout Repository
                uses: actions/checkout@v4

            -   name: Set up Rust
                uses: dtolnay/rust-toolchain@stable
                with:
                    toolchain: ${{ matrix.rust }}

            -   name: Set up MSVC (Windows only)
                if: matrix.os == 'windows-latest'
                run: rustup set default-host x86_64-pc-windows-msvc

            -   name: Install Python (for pyo3)
                uses: actions/setup-python@v5
                with:
                    python-version: "3.10"

            -   name: Set up Cargo Cache
                uses: actions/cache@v4
                with:
                    path: |
                        ~/.cargo/bin
                        ~/.cargo/registry
                        ~/.cargo/git
                        target/release
                    key: rust-${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
                    restore-keys: |
                        rust-${{ matrix.os }}-${{ matrix.rust }}-
            -   name: Build `grader`
                run: cargo build --release --package grader

            -   name: Generate Build Hash
                run: sha256sum target/release/grader* | cut -c1-8 > build-hash-${{ matrix.os }}.txt

            -   name: List Built Files
                run: ls -l target/release/

            -   name: Upload Build Artifacts
                uses: actions/upload-artifact@v4
                with:
                    name: grader-${{ matrix.os }}
                    retention-days: 7
                    path: |
                        target/release/grader
                        target/release/grader.exe
                        build-hash-${{ matrix.os }}.txt


    release:
        needs: build  # 确保在 build 任务成功后才执行
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout Repository
                uses: actions/checkout@v4

            -   name: Download All Artifacts
                uses: actions/download-artifact@v4
                with:
                    path: artifacts
            -   name: Aggregate Build Hashes
                run: |
                    find artifacts/ -name "build-hash-*.txt" | sort | xargs cat > build-hash.txt

            -   name: List Built Files
                run: |
                    ls -l artifacts

            -   name: Get Latest Release Info
                id: get_latest_release
                run: |
                    API_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
                    LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
                    
                    ASSET_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name=="build-hash.txt") | .browser_download_url')
                    
                    if [[ -n "$ASSET_URL" ]]; then
                        curl -s -L -o previous-build-hash.txt "$ASSET_URL"
                        echo "PREVIOUS_HASH_EXISTS=true" >> $GITHUB_ENV
                    else
                        echo "PREVIOUS_HASH_EXISTS=false" >> $GITHUB_ENV
                    fi
            -   name: Compare Build Hashes
                id: check_hash
                run: |
                    if [[ "$PREVIOUS_HASH_EXISTS" == "true" ]]; then
                        if cmp -s build-hash.txt previous-build-hash.txt; then
                            echo "BUILD_CHANGED=false" >> $GITHUB_ENV
                        else
                            echo "BUILD_CHANGED=true" >> $GITHUB_ENV
                        fi
                    else
                        echo "BUILD_CHANGED=true" >> $GITHUB_ENV
                    fi

            -   name: Skip Release If No Changes
                if: env.BUILD_CHANGED == 'false'
                run: echo "No changes detected. Skipping release."

            -   name: Organize Build Artifacts
                run: |
                    mkdir -p release
                    cp artifacts/grader-macos-latest/grader release/grader-macos
                    cp artifacts/grader-ubuntu-latest/grader release/grader-linux
                    cp artifacts/grader-windows-latest/grader.exe release/grader-windows.exe
                    cp artifacts/build-hash.txt release/build-hash.txt

            -   name: List Release Files
                run: ls -l release

            -   name: Get Latest Tag
                if: env.BUILD_CHANGED == 'true'
                id: get_latest_tag
                run: |
                    latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
                    if [[ -z "$latest_tag" ]]; then
                        latest_tag="$(date +'%Y%m%d')"
                    else
                        latest_tag="${latest_tag}-$(date +'%Y%m%d-%H%M%S')"
                    fi
                    echo "RELEASE_TAG=$latest_tag" >> $GITHUB_ENV

            -   name: Create GitHub Release (Draft)
                if: env.BUILD_CHANGED == 'true'
                uses: softprops/action-gh-release@v2
                with:
                    tag_name: ${{ env.RELEASE_TAG }}
                    draft: true  # 创建草稿发布
                    name: "Grader Release ${{ env.RELEASE_TAG }}"
                    body: "This is an auto-generated release draft for Grader."
                    fail_on_unmatched_files: true
                    files: |
                        release/*
                env:
                    GITHUB_TOKEN: ${{ secrets.GRADER_RELEASE_TOKEN }}